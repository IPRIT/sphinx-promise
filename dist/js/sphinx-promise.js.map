{"version":3,"sources":["sphinx-promise.js"],"names":["DEFAULT_OFFSET","DEFAULT_LIMIT","DEFAULT_MAX_MATCHES","DEFAULT_CUTOFF","Sphinx","host","port","config","isDebugMode","setConfig","TypeError","SetServer","Number","retryOption","count","delay","SetRetries","queryString","options","_ensureQueryArgs","index","comment","filters","limits","resultAsIds","matchMode","_resetFilters","_addFilters","_setLimits","_setMatchMode","promisify","Query","bind","then","getIdsFromResult","result","tap","console","info","AddQuery","forEach","_addFilter","offset","limit","maxMatches","cutoff","SetLimits","attr","values","exclude","SetFilter","ResetFilters","RunQueries","mode","SetMatchMode","hasOwnProperty","matches","map","match","id","filter","query","defaultOptions","SPH_MATCH_EXTENDED2","merge","str","log","SPH_MATCH_ALL","SPH_MATCH_ANY","SPH_MATCH_PHRASE","SPH_MATCH_BOOLEAN","SPH_MATCH_EXTENDED","SPH_MATCH_FULLSCAN","module","exports"],"mappings":"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","file":"sphinx-promise.js","sourcesContent":["/* @preserve\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2016-2017 Alexander Belov\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n\r\nimport Promise from 'bluebird';\r\nimport SphinxClient from 'sphinxapi';\r\nimport { typeCheck as isType } from 'type-check';\r\nimport deap from 'deap';\r\n\r\n\r\n/**\r\n * Limits constants\r\n * @see http://sphinxsearch.com/docs/current.html#api-func-setlimits\r\n */\r\nconst DEFAULT_OFFSET      = 0;\r\nconst DEFAULT_LIMIT       = 20;\r\nconst DEFAULT_MAX_MATCHES = 1000;\r\nconst DEFAULT_CUTOFF      = 0;\r\n\r\n\r\nclass Sphinx extends SphinxClient {\r\n  \r\n  config = {};\r\n  isDebugMode = false;\r\n  \r\n  \r\n  /**\r\n   * @static\r\n   * @see http://sphinxsearch.com/docs/current.html#matching-modes\r\n   */\r\n  static SPH_MATCH_ALL        = SphinxClient.SPH_MATCH_ALL;\r\n  static SPH_MATCH_ANY        = SphinxClient.SPH_MATCH_ANY;\r\n  static SPH_MATCH_PHRASE     = SphinxClient.SPH_MATCH_PHRASE;\r\n  static SPH_MATCH_BOOLEAN    = SphinxClient.SPH_MATCH_BOOLEAN;\r\n  static SPH_MATCH_EXTENDED   = SphinxClient.SPH_MATCH_EXTENDED;\r\n  static SPH_MATCH_EXTENDED2  = SphinxClient.SPH_MATCH_EXTENDED2;\r\n  static SPH_MATCH_FULLSCAN   = SphinxClient.SPH_MATCH_FULLSCAN;\r\n  \r\n  \r\n  /**\r\n   * @param {String} host\r\n   * @param {Number | String} port\r\n   * @constructor\r\n   */\r\n  constructor({ host = 'localhost', port = 9312 } = {}) {\r\n    super();\r\n    this.setConfig({ host, port });\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Sets searchd host name and TCP port.\r\n   *\r\n   * @description\r\n   * All subsequent requests will use the new host and port settings.\r\n   * Default host and port are 'localhost' and 9312, respectively.\r\n   *\r\n   * @param {String} host\r\n   * @param {Number | String} port\r\n   */\r\n  setConfig({ host = 'localhost', port = 9312 } = {}) {\r\n    if (!isType('String', host) || !isType('Number | String', port)) {\r\n      throw new TypeError('Invalid config object');\r\n    }\r\n    this.config = { host, port };\r\n    this.SetServer(host, Number(port));\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Sets distributed retry count and delay.\r\n   *\r\n   * @description\r\n   * On temporary failures searchd will attempt up to retryOption#count retries per agent.\r\n   * retryOption#delay is the delay between the retries, in milliseconds. Retries are disabled by default.\r\n   * Note that this call will not make the API itself retry on temporary failure; it only tells searchd to do so.\r\n   * Currently, the list of temporary failures includes all kinds of connect() failures and maxed out (too busy)\r\n   * remote agents.\r\n   *\r\n   * @param {{count: Number, delay?: Number}} retryOption\r\n   */\r\n  setRetriesOption(retryOption = {}) {\r\n    let { count, delay = 0 } = retryOption;\r\n    if (!isType('Number', count) || !isType('Number', delay)) {\r\n      throw new TypeError('Invalid RetryOption object');\r\n    }\r\n    this.SetRetries(count, delay);\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Connects to searchd server, runs given search query with current settings, obtains and returns the result set.\r\n   * @see http://sphinxsearch.com/docs/current.html#api-func-query\r\n   *\r\n   * @param {String | Object} queryString - given query string\r\n   * @param {{\r\n   *    query?: String,\r\n   *    index?: String,\r\n   *    comment?: String,\r\n   *    filters?: Array,\r\n   *    limits?: Object,\r\n   *    matchMode?: Number,\r\n   *    resultAsIds?: Boolean\r\n   * }} options\r\n   */\r\n  query(queryString = \"\", options = {}) {\r\n    [ queryString, options ] = this._ensureQueryArgs(queryString, options);\r\n    let { index, comment, filters = [], limits, resultAsIds, matchMode } = options;\r\n    this._resetFilters();\r\n    this._addFilters(filters);\r\n    this._setLimits(limits);\r\n    this._setMatchMode(matchMode);\r\n    return Promise.promisify(this.Query.bind( this ))(queryString, index, comment)\r\n      .then(result => resultAsIds ? this.getIdsFromResult(result) : result)\r\n      .tap(result => this.isDebugMode && console.info(result));\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Add a new query to the chain\r\n   *\r\n   * @see http://sphinxsearch.com/docs/current.html#api-func-addquery\r\n   *\r\n   * @param {String | Object} queryString - given query string\r\n   * @param {{\r\n   *    query?: String,\r\n   *    index?: String,\r\n   *    comment?: String,\r\n   *    filters?: Array,\r\n   *    limits?: Object,\r\n   *    matchMode?: Number\r\n   * }} options\r\n   * @return {Number} a correspondent index from the array that will be returned\r\n   */\r\n  addQuery(queryString = \"\", options = {}) {\r\n    [ queryString, options ] = this._ensureQueryArgs(queryString, options);\r\n    let { index, comment, filters = [], limits, matchMode } = options;\r\n    this._resetFilters();\r\n    this._addFilters(filters);\r\n    this._setLimits(limits);\r\n    this._setMatchMode(matchMode);\r\n    return this.AddQuery(queryString, index, comment);\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @param {Array<Object>} filters\r\n   * @private\r\n   */\r\n  _addFilters(filters = []) {\r\n    filters.forEach(this._addFilter.bind( this ));\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @see http://sphinxsearch.com/docs/current.html#api-func-setlimits\r\n   *\r\n   * @param {Number} offset\r\n   * @param {Number} limit\r\n   * @param {Number} maxMatches\r\n   * @param {Number} cutoff\r\n   * @private\r\n   */\r\n  _setLimits({ offset = DEFAULT_OFFSET, limit = DEFAULT_LIMIT\r\n    , maxMatches = DEFAULT_MAX_MATCHES, cutoff = DEFAULT_CUTOFF } = {}) {\r\n    this.SetLimits(offset, limit, maxMatches, cutoff);\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Set default limits for all queries\r\n   *\r\n   * @private\r\n   */\r\n  _resetLimits() {\r\n    this._setLimits();\r\n  }\r\n  \r\n  /**\r\n   * @see http://sphinxsearch.com/docs/current.html#api-func-setfilter\r\n   *\r\n   * @param {String} attr\r\n   * @param {Array<Number>} values\r\n   * @param {Boolean?} exclude\r\n   * @private\r\n   */\r\n  _addFilter({ attr, values, exclude = false } = {}) {\r\n    if (!isType('[Number]', values)) {\r\n      throw new TypeError('Values must be an array of numbers');\r\n    }\r\n    this.SetFilter(attr, values, exclude);\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @see http://sphinxsearch.com/docs/current.html#api-func-resetfilters\r\n   *\r\n   * @private\r\n   */\r\n  _resetFilters() {\r\n    this.ResetFilters();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @see http://sphinxsearch.com/docs/current.html#api-func-runqueries\r\n   */\r\n  runQueries() {\r\n    return Promise.promisify(this.RunQueries.bind( this ))();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Sets full-text query matching mode, as described in Section 5.1, “Matching modes” from docs.\r\n   * Parameter must be a constant specifying one of the known modes.\r\n   * @see http://sphinxsearch.com/docs/current.html#api-func-setmatchmode\r\n   *\r\n   * @param {Number} mode\r\n   */\r\n  _setMatchMode(mode) {\r\n    this.SetMatchMode(mode);\r\n  }\r\n  \r\n  /**\r\n   * Get ids from `macthes` array\r\n   *\r\n   * @param {Object} result\r\n   * @return {Array<Number>}\r\n   */\r\n  getIdsFromResult(result = {}) {\r\n    if (!isType('Object', result)) {\r\n      throw new TypeError('Result must be an object');\r\n    } else if (!result.hasOwnProperty('matches')) {\r\n      return [];\r\n    }\r\n    return result.matches.map(match => match && match.id)\r\n      .filter(id => isType('Number', id));\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Enables debug mode\r\n   *\r\n   * @param {Boolean} mode\r\n   */\r\n  setDebugMode(mode = true) {\r\n    this.isDebugMode = mode;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Ensure arguments for query function\r\n   * @param {String | Object} queryString\r\n   * @param {Object} options\r\n   * @return {Array<String | Object>}\r\n   * @private\r\n   */\r\n  _ensureQueryArgs(queryString, options) {\r\n    if (isType('Object', queryString)) {\r\n      if (!isType('String', queryString.query)) {\r\n        throw new TypeError('Query must be a string');\r\n      }\r\n      options = queryString;\r\n      queryString = options.query;\r\n      delete options.query;\r\n    }\r\n    let defaultOptions = {\r\n      index: '*',\r\n      comment: '',\r\n      filters: [],\r\n      limits: {\r\n        offset: DEFAULT_OFFSET,\r\n        count: DEFAULT_LIMIT\r\n      },\r\n      matchMode: Sphinx.SPH_MATCH_EXTENDED2,\r\n      resultAsIds: false\r\n    };\r\n    return [ queryString, deap.merge(options, defaultOptions) ];\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @param {String} str\r\n   * @return {Promise.<TResult>|*}\r\n   * @private\r\n   */\r\n  async _test(str = 'works') {\r\n    console.log('Waiting...');\r\n    await Promise.delay(500);\r\n    console.log('Done!');\r\n    return Promise.delay(500).then(() => console.log('Resolved:', str));\r\n  }\r\n}\r\n\r\nmodule.exports = Sphinx;"],"sourceRoot":"/source/"}