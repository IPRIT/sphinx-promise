{"version":3,"sources":["sphinx-promise.js","runtime.js"],"names":["DEFAULT_OFFSET","DEFAULT_LIMIT","DEFAULT_MAX_MATCHES","DEFAULT_CUTOFF","Sphinx","host","port","config","isDebugMode","setConfig","TypeError","SetServer","Number","retryOption","count","delay","SetRetries","queryString","options","_ensureQueryArgs","index","comment","filters","limits","resultAsIds","matchMode","_resetFilters","_addFilters","_setLimits","_setMatchMode","Promise","promisify","Query","bind","then","getIdsFromResult","result","tap","console","info","AddQuery","forEach","_addFilter","offset","limit","maxMatches","cutoff","SetLimits","attr","values","exclude","SetFilter","SetFilterString","ResetFilters","RunQueries","mode","SetMatchMode","hasOwnProperty","matches","map","match","id","filter","query","defaultOptions","SPH_MATCH_EXTENDED2","deap","merge","str","log","SphinxClient","SPH_MATCH_ALL","SPH_MATCH_ANY","SPH_MATCH_PHRASE","SPH_MATCH_BOOLEAN","SPH_MATCH_EXTENDED","SPH_MATCH_FULLSCAN","module","exports"],"mappings":"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":"sphinx-promise.js","sourcesContent":["/* @preserve\n * The MIT License (MIT)\n *\n * Copyright (c) 2016-2017 Alexander Belov\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\nimport Promise from 'bluebird';\nimport SphinxClient from 'sphinxapi';\nimport { typeCheck as isType } from 'type-check';\nimport deap from 'deap';\n\n\n/**\n * Limits constants\n * @see http://sphinxsearch.com/docs/current.html#api-func-setlimits\n */\nconst DEFAULT_OFFSET      = 0;\nconst DEFAULT_LIMIT       = 20;\nconst DEFAULT_MAX_MATCHES = 1000;\nconst DEFAULT_CUTOFF      = 0;\n\n\nclass Sphinx extends SphinxClient {\n  \n  config = {};\n  isDebugMode = false;\n  \n  \n  /**\n   * @static\n   * @see http://sphinxsearch.com/docs/current.html#matching-modes\n   */\n  static SPH_MATCH_ALL        = SphinxClient.SPH_MATCH_ALL;\n  static SPH_MATCH_ANY        = SphinxClient.SPH_MATCH_ANY;\n  static SPH_MATCH_PHRASE     = SphinxClient.SPH_MATCH_PHRASE;\n  static SPH_MATCH_BOOLEAN    = SphinxClient.SPH_MATCH_BOOLEAN;\n  static SPH_MATCH_EXTENDED   = SphinxClient.SPH_MATCH_EXTENDED;\n  static SPH_MATCH_EXTENDED2  = SphinxClient.SPH_MATCH_EXTENDED2;\n  static SPH_MATCH_FULLSCAN   = SphinxClient.SPH_MATCH_FULLSCAN;\n  \n  \n  /**\n   * @param {String} host\n   * @param {Number | String} port\n   * @constructor\n   */\n  constructor({ host = 'localhost', port = 9312 } = {}) {\n    super();\n    this.setConfig({ host, port });\n  }\n  \n  \n  /**\n   * Sets searchd host name and TCP port.\n   *\n   * @description\n   * All subsequent requests will use the new host and port settings.\n   * Default host and port are 'localhost' and 9312, respectively.\n   *\n   * @param {String} host\n   * @param {Number | String} port\n   */\n  setConfig({ host = 'localhost', port = 9312 } = {}) {\n    if (!isType('String', host) || !isType('Number | String', port)) {\n      throw new TypeError('Invalid config object');\n    }\n    this.config = { host, port };\n    this.SetServer(host, Number(port));\n  }\n  \n  \n  /**\n   * Sets distributed retry count and delay.\n   *\n   * @description\n   * On temporary failures searchd will attempt up to retryOption#count retries per agent.\n   * retryOption#delay is the delay between the retries, in milliseconds. Retries are disabled by default.\n   * Note that this call will not make the API itself retry on temporary failure; it only tells searchd to do so.\n   * Currently, the list of temporary failures includes all kinds of connect() failures and maxed out (too busy)\n   * remote agents.\n   *\n   * @param {{count: Number, delay?: Number}} retryOption\n   */\n  setRetriesOption(retryOption = {}) {\n    let { count, delay = 0 } = retryOption;\n    if (!isType('Number', count) || !isType('Number', delay)) {\n      throw new TypeError('Invalid RetryOption object');\n    }\n    this.SetRetries(count, delay);\n  }\n  \n  \n  /**\n   * Connects to searchd server, runs given search query with current settings, obtains and returns the result set.\n   * @see http://sphinxsearch.com/docs/current.html#api-func-query\n   *\n   * @param {String | Object} queryString - given query string\n   * @param {{\n   *    query?: String,\n   *    index?: String,\n   *    comment?: String,\n   *    filters?: Array,\n   *    limits?: Object,\n   *    matchMode?: Number,\n   *    resultAsIds?: Boolean\n   * }} options\n   */\n  query(queryString = \"\", options = {}) {\n    [ queryString, options ] = this._ensureQueryArgs(queryString, options);\n    let { index, comment, filters = [], limits, resultAsIds, matchMode } = options;\n    this._resetFilters();\n    this._addFilters(filters);\n    this._setLimits(limits);\n    this._setMatchMode(matchMode);\n    return Promise.promisify(this.Query.bind( this ))(queryString, index, comment)\n      .then(result => resultAsIds ? this.getIdsFromResult(result) : result)\n      .tap(result => this.isDebugMode && console.info(result));\n  }\n  \n  \n  /**\n   * Add a new query to the chain\n   *\n   * @see http://sphinxsearch.com/docs/current.html#api-func-addquery\n   *\n   * @param {String | Object} queryString - given query string\n   * @param {{\n   *    query?: String,\n   *    index?: String,\n   *    comment?: String,\n   *    filters?: Array,\n   *    limits?: Object,\n   *    matchMode?: Number\n   * }} options\n   * @return {Number} a correspondent index from the array that will be returned\n   */\n  addQuery(queryString = \"\", options = {}) {\n    [ queryString, options ] = this._ensureQueryArgs(queryString, options);\n    let { index, comment, filters = [], limits, matchMode } = options;\n    this._resetFilters();\n    this._addFilters(filters);\n    this._setLimits(limits);\n    this._setMatchMode(matchMode);\n    return this.AddQuery(queryString, index, comment);\n  }\n  \n  \n  /**\n   * @param {Array<Object>} filters\n   * @private\n   */\n  _addFilters(filters = []) {\n    filters.forEach(this._addFilter.bind( this ));\n  }\n  \n  \n  /**\n   * @see http://sphinxsearch.com/docs/current.html#api-func-setlimits\n   *\n   * @param {Number} offset\n   * @param {Number} limit\n   * @param {Number} maxMatches\n   * @param {Number} cutoff\n   * @private\n   */\n  _setLimits({ offset = DEFAULT_OFFSET, limit = DEFAULT_LIMIT\n    , maxMatches = DEFAULT_MAX_MATCHES, cutoff = DEFAULT_CUTOFF } = {}) {\n    this.SetLimits(offset, limit, maxMatches, cutoff);\n  }\n  \n  \n  /**\n   * Set default limits for all queries\n   *\n   * @private\n   */\n  _resetLimits() {\n    this._setLimits();\n  }\n  \n  /**\n   * @see http://sphinxsearch.com/docs/current.html#api-func-setfilter\n   *\n   * @param {String} attr\n   * @param {Array<Number>} values\n   * @param {Boolean?} exclude\n   * @private\n   */\n  _addFilter({ attr, values, exclude = false } = {}) {\n    values = values || values;\n    if (isType('[Number]', values)) {\n      this.SetFilter(attr, values, exclude);\n    } if (isType('Number', values)) {\n      this.SetFilter(attr, [values], exclude);\n    } else {\n      this.SetFilterString(attr, values, exclude);\n    }\n  }\n  \n  \n  /**\n   * @see http://sphinxsearch.com/docs/current.html#api-func-resetfilters\n   *\n   * @private\n   */\n  _resetFilters() {\n    this.ResetFilters();\n  }\n  \n  \n  /**\n   * @see http://sphinxsearch.com/docs/current.html#api-func-runqueries\n   */\n  runQueries() {\n    return Promise.promisify(this.RunQueries.bind( this ))();\n  }\n  \n  \n  /**\n   * Sets full-text query matching mode, as described in Section 5.1, “Matching modes” from docs.\n   * Parameter must be a constant specifying one of the known modes.\n   * @see http://sphinxsearch.com/docs/current.html#api-func-setmatchmode\n   *\n   * @param {Number} mode\n   */\n  _setMatchMode(mode) {\n    this.SetMatchMode(mode);\n  }\n  \n  /**\n   * Get ids from `macthes` array\n   *\n   * @param {Object} result\n   * @return {Array<Number>}\n   */\n  getIdsFromResult(result = {}) {\n    if (!isType('Object', result)) {\n      throw new TypeError('Result must be an object');\n    } else if (!result.hasOwnProperty('matches')) {\n      return [];\n    }\n    return result.matches.map(match => match && match.id)\n      .filter(id => isType('Number', id));\n  }\n  \n  \n  /**\n   * Enables debug mode\n   *\n   * @param {Boolean} mode\n   */\n  setDebugMode(mode = true) {\n    this.isDebugMode = mode;\n  }\n  \n  \n  /**\n   * Ensure arguments for query function\n   * @param {String | Object} queryString\n   * @param {Object} options\n   * @return {Array<String | Object>}\n   * @private\n   */\n  _ensureQueryArgs(queryString, options) {\n    if (isType('Object', queryString)) {\n      if (!isType('String', queryString.query)) {\n        throw new TypeError('Query must be a string');\n      }\n      options = queryString;\n      queryString = options.query;\n      delete options.query;\n    }\n    let defaultOptions = {\n      index: '*',\n      comment: '',\n      filters: [],\n      limits: {\n        offset: DEFAULT_OFFSET,\n        count: DEFAULT_LIMIT\n      },\n      matchMode: Sphinx.SPH_MATCH_EXTENDED2,\n      resultAsIds: false\n    };\n    return [ queryString, deap.merge(options, defaultOptions) ];\n  }\n  \n  \n  /**\n   * @param {String} str\n   * @return {Promise.<TResult>|*}\n   * @private\n   */\n  async _test(str = 'works') {\n    console.log('Waiting...');\n    await Promise.delay(500);\n    console.log('Done!');\n    return Promise.delay(500).then(() => console.log('Resolved:', str));\n  }\n}\n\nmodule.exports = Sphinx;",null]}